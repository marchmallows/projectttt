{
	"info": {
		"_postman_id": "d040dd1d-7965-46dc-a6d9-c504f651e9d5",
		"name": "projec",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Insert attraction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"should have key mongo_id\", function () {",
							"    pm.expect(jsonData.data).to.have.property('attraction_id');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"id\":\"00001\" ,\n \"idlat\" : \"103.52416491276725\",\n   \"idlong\" : \"16.693614558623562\",\n  \"picture_url\":  \"https://www.paiduaykan.com/province/Northeast/kalasin/pic/sirindhornmuseum.jpg\",\n  \"name_attraction\" : \"พิพิธภัณฑ์สิรินธร\",\n    \"country\" : \"Thailand\",\n    \"state\" : \"จังหวัดกาฬสินธุ์\",\n    \"zone\" : \"ภาคเหนือ\",\n    \"seasons\" : \"ฤดูหนาว\",\n  \"Type\" : \"mountian\"\n  }\n"
				},
				"url": {
					"raw": "{{apiUrl}}/attraction",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"attraction"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find attraction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Should return data json 12 fields\", function () {",
							"    pm.expect(Object.keys(jsonData.data[0]).length).to.eql(12);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/attraction/",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"attraction",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Find attraction id by age order by asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Should return data json 12 fields\", function () {",
							"    pm.expect(Object.keys(jsonData.data[0]).length).to.eql(12);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/attraction/?sort_by=age&order=asc",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"attraction",
						""
					],
					"query": [
						{
							"key": "sort_by",
							"value": "id"
						},
						{
							"key": "order",
							"value": "asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Find books sort by age order by desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Should return data json 12 fields\", function () {",
							"    pm.expect(Object.keys(jsonData.data[0]).length).to.eql(12);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/attraction/?sort_by=age&order=desc",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"attraction",
						""
					],
					"query": [
						{
							"key": "sort_by",
							"value": "id"
						},
						{
							"key": "order",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update attraction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"should have key mongo_id\", function () {",
							"    pm.expect(jsonData.data).to.have.property('student_id');",
							"})",
							"",
							"pm.test(\"should have key modified_count\", function () {",
							"    pm.expect(jsonData.data).to.have.property('modified_count');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"idlat\" : 103.52416491276725\n}"
				},
				"url": {
					"raw": "{{apiUrl}}/attraction/00001",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"attraction",
						"00001"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find attraction by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Should return data json 12 fields\", function () {",
							"    pm.expect(Object.keys(jsonData.data).length).to.eql(12);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/attraction/00001",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"attraction",
						"00001"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete attraction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"should have key mongo_id\", function () {",
							"    pm.expect(jsonData.data).to.have.property('student_id');",
							"})",
							"",
							"pm.test(\"should have key deleted_count\", function () {",
							"    pm.expect(jsonData.data).to.have.property('deleted_count');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "var jsonData = pm.response.json();\n\npm.test(\"should have key mongo_id\", function () {\n    pm.expect(jsonData.data).to.have.property('student_id');\n})\n\npm.test(\"should have key modified_count\", function () {\n    pm.expect(jsonData.data).to.have.property('deleted_count');\n})"
				},
				"url": {
					"raw": "{{apiUrl}}/attraction/103.5",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"attraction",
						"00001"
					]
				}
			},
			"response": []
		}
	]
}