{
	"info": {
		"_postman_id": "d040dd1d-7965-46dc-a6d9-c504f651e9d5",
		"name": "projec",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Insert music",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"should have key mongo_id\", function () {",
							"    pm.expect(jsonData.data).to.have.property('music_id');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n \"id\":\"11111\" ,\n \"picture_urlmusic\" : \"https://video-images.vice.com/test-uploads/articles/5ebe602b9750920096b48faf/lede/1589534916204-Gracie-Abrams-by-Vince-Aung-iD.jpeg?crop=1xw%3A0.3919xh%3B0xw%2C0.1768xh&resize=2000%3A*\",\n   \"idlong\" : \"16.693614558623562\",\n  \"picture_urlowner\":  \"https://pyxis.nymag.com/v1/imgs/5d4/f6a/760f8a0206e072c19253da37e9a2d909da-Gracie03.rsocial.w1200.jpg\",\n  \"name_music\" : \"Friend\",\n    \"name_music_owner\" : \"Gracie Abrams\",\n    \"link_music\" : \"https://www.youtube.com/watch?v=qNeWBZ5B-xU&list=RDMMqNeWBZ5B-xU&start_radio=1\",\n    \"music_time\" : \"3.08\",\n    \"country\" : \"California\",\n  \"Type\" : \"Pop\"\n  }\n"
				},
				"url": {
					"raw": "{{apiUrl}}/music",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"music"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find music",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Should return data json 12 fields\", function () {",
							"    pm.expect(Object.keys(jsonData.data[0]).length).to.eql(12);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/music/",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"music",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Find music id by time order by asc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Should return data json 12 fields\", function () {",
							"    pm.expect(Object.keys(jsonData.data[0]).length).to.eql(12);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/music/?sort_by=age&order=asc",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"music",
						""
					],
					"query": [
						{
							"key": "sort_by",
							"value": "id"
						},
						{
							"key": "order",
							"value": "asc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Find music sort by music order by desc",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Should return data json 12 fields\", function () {",
							"    pm.expect(Object.keys(jsonData.data[0]).length).to.eql(12);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/attraction/?sort_by=age&order=desc",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"music",
						""
					],
					"query": [
						{
							"key": "sort_by",
							"value": "id"
						},
						{
							"key": "order",
							"value": "desc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Update music",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"should have key mongo_id\", function () {",
							"    pm.expect(jsonData.data).to.have.property('student_id');",
							"})",
							"",
							"pm.test(\"should have key modified_count\", function () {",
							"    pm.expect(jsonData.data).to.have.property('modified_count');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"music_time\" : 3.08\n}"
				},
				"url": {
					"raw": "{{apiUrl}}/music/11111",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"music",
						"11111"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find music by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Should return data json 12 fields\", function () {",
							"    pm.expect(Object.keys(jsonData.data).length).to.eql(12);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{apiUrl}}/music/00001",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"music",
						"00001"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete music",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"should have key mongo_id\", function () {",
							"    pm.expect(jsonData.data).to.have.property('student_id');",
							"})",
							"",
							"pm.test(\"should have key deleted_count\", function () {",
							"    pm.expect(jsonData.data).to.have.property('deleted_count');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "var jsonData = pm.response.json();\n\npm.test(\"should have key mongo_id\", function () {\n    pm.expect(jsonData.data).to.have.property('student_id');\n})\n\npm.test(\"should have key modified_count\", function () {\n    pm.expect(jsonData.data).to.have.property('deleted_count');\n})"
				},
				"url": {
					"raw": "{{apiUrl}}/music/3.08",
					"host": [
						"{{apiUrl}}"
					],
					"path": [
						"music",
						"11111"
					]
				}
			},
			"response": []
		}
	]
}